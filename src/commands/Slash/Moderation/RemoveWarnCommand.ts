import {
  AutocompleteRunOptions,
  SlashCommand,
  SlashCommandRunOptions,
} from '../../../structures/Commands/SlashCommand';
import { SlashCommandBuilder } from '@discordjs/builders';
import { getMemberBaseId } from '../../../utils/Other';
import { GuildMember, MessageEmbed } from 'discord.js';
import { Searcher } from 'fast-fuzzy';
import { ErrorEmbed, SuccessEmbed } from '../../../utils/Discord/Embed';
import { Colors } from '../../../static/Colors';
import { Emojis } from '../../../static/Emojis';

class RemoveWarnCommand extends SlashCommand {
  meta = new SlashCommandBuilder()
    .setName('removewarn')
    .setDescription('–°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    .addUserOption((option) => {
      return option
        .setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')
        .setRequired(true);
    })
    .addNumberOption((option) => {
      return option
        .setName('–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')
        .setDescription('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å')
        .setAutocomplete(true)
        .setRequired(true);
    })
    .addStringOption((option) => {
      return option.setName('–ø—Ä–∏—á–∏–Ω–∞').setDescription('–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞').setRequired(false);
    });

  async run({ client, interaction }: SlashCommandRunOptions) {
    if (!interaction.memberPermissions.has('BAN_MEMBERS')) {
      const embed = ErrorEmbed('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
      interaction.reply({ embeds: [embed], ephemeral: true });
      return;
    }

    const targetMember = interaction.options.getMember('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', true);

    if (!(targetMember instanceof GuildMember)) {
      const embed = ErrorEmbed('–û—à–∏–±–∫–∞');
      interaction.reply({ embeds: [embed], ephemeral: true });
      return;
    }

    const warnId = interaction.options.getNumber('–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', true);

    const warns = await client.service.getWarns(getMemberBaseId(targetMember));

    if (warns.length < warnId + 1) {
      const embed = ErrorEmbed('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–¥ —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º').setFooter({
        text: '–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ >warns',
      });
      interaction.reply({ embeds: [embed], ephemeral: true });
      return;
    }

    if (warns[warnId].removed) {
      const embed = ErrorEmbed('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ');
      interaction.reply({ embeds: [embed], ephemeral: true });
      return;
    }

    const reason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞', false);

    client.service.removeWarn(getMemberBaseId(targetMember), warnId, interaction.user.id, reason);

    const embed = SuccessEmbed(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetMember} –±—ã–ª–æ —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Ññ${warnId + 1}`);
    const directEmbed = new MessageEmbed()
      .setColor(Colors.Blue)
      .setDescription(
        `${Emojis.Info} –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ \`${interaction.guild}\` —É –í–∞—Å –±—ã–ª–æ —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Ññ${warnId + 1}`,
      )
      .setTimestamp();

    if (reason) {
      embed.setFooter({ text: `–ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è: ${reason}` });
      directEmbed.setFooter({ text: `–ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è: ${reason}` });
    }

    interaction.reply({ embeds: [embed] });
    targetMember.send({ embeds: [directEmbed] });
  }

  async handleAutocomplete({ client, interaction }: AutocompleteRunOptions) {
    const focusedValue = interaction.options.getFocused(true);

    if (focusedValue.name !== '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ') {
      return;
    }

    const targetUserId = interaction.options.data.find((option) => option.name === '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').value;
    const targetMember = interaction.guild.members.cache.get(targetUserId as string);

    if (!(targetMember instanceof GuildMember)) {
      return;
    }

    const warns = await client.service.getWarns(getMemberBaseId(targetMember));

    if (!warns.length) {
      interaction.respond([]);
      return;
    }

    const mappedWarns = warns
      .slice(0, 25)
      .map((warn, index) => {
        if (warn.removed) {
          return;
        }

        return {
          name: `üìù –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Ññ${index + 1}` + (warn.reason ? `. –ü—Ä–∏—á–∏–Ω–∞: ${warn.reason}` : ''),
          value: index,
        };
      })
      .filter(Boolean);

    if (focusedValue.value === '') {
      await interaction.respond(mappedWarns);
      return;
    }

    const searcher = new Searcher(mappedWarns, {
      keySelector: (item) => item.name,
    });

    const filteredWarns = searcher.search(focusedValue.value as string);

    await interaction.respond(filteredWarns);
  }
}

export default new RemoveWarnCommand();
